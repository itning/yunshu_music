// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:yunshu_music/net/model/music_meta_info_entity.dart';
import 'package:yunshu_music/generated/json/music_meta_info_entity_helper.dart';
import 'package:yunshu_music/net/model/music_entity.dart';
import 'package:yunshu_music/generated/json/music_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case MusicMetaInfoEntity:
				return musicMetaInfoEntityFromJson(data as MusicMetaInfoEntity, json) as T;
			case MusicMetaInfoData:
				return musicMetaInfoDataFromJson(data as MusicMetaInfoData, json) as T;
			case MusicMetaInfoDataCoverPictures:
				return musicMetaInfoDataCoverPicturesFromJson(data as MusicMetaInfoDataCoverPictures, json) as T;
			case MusicEntity:
				return musicEntityFromJson(data as MusicEntity, json) as T;
			case MusicData:
				return musicDataFromJson(data as MusicData, json) as T;
			case MusicDataContent:
				return musicDataContentFromJson(data as MusicDataContent, json) as T;
			case MusicDataPageable:
				return musicDataPageableFromJson(data as MusicDataPageable, json) as T;
			case MusicDataPageableSort:
				return musicDataPageableSortFromJson(data as MusicDataPageableSort, json) as T;
			case MusicDataSort:
				return musicDataSortFromJson(data as MusicDataSort, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case MusicMetaInfoEntity:
				return musicMetaInfoEntityToJson(data as MusicMetaInfoEntity);
			case MusicMetaInfoData:
				return musicMetaInfoDataToJson(data as MusicMetaInfoData);
			case MusicMetaInfoDataCoverPictures:
				return musicMetaInfoDataCoverPicturesToJson(data as MusicMetaInfoDataCoverPictures);
			case MusicEntity:
				return musicEntityToJson(data as MusicEntity);
			case MusicData:
				return musicDataToJson(data as MusicData);
			case MusicDataContent:
				return musicDataContentToJson(data as MusicDataContent);
			case MusicDataPageable:
				return musicDataPageableToJson(data as MusicDataPageable);
			case MusicDataPageableSort:
				return musicDataPageableSortToJson(data as MusicDataPageableSort);
			case MusicDataSort:
				return musicDataSortToJson(data as MusicDataSort);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (MusicMetaInfoEntity).toString()){
			return MusicMetaInfoEntity().fromJson(json);
		}
		if(type == (MusicMetaInfoData).toString()){
			return MusicMetaInfoData().fromJson(json);
		}
		if(type == (MusicMetaInfoDataCoverPictures).toString()){
			return MusicMetaInfoDataCoverPictures().fromJson(json);
		}
		if(type == (MusicEntity).toString()){
			return MusicEntity().fromJson(json);
		}
		if(type == (MusicData).toString()){
			return MusicData().fromJson(json);
		}
		if(type == (MusicDataContent).toString()){
			return MusicDataContent().fromJson(json);
		}
		if(type == (MusicDataPageable).toString()){
			return MusicDataPageable().fromJson(json);
		}
		if(type == (MusicDataPageableSort).toString()){
			return MusicDataPageableSort().fromJson(json);
		}
		if(type == (MusicDataSort).toString()){
			return MusicDataSort().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<MusicMetaInfoEntity>[] is M){
			return data.map<MusicMetaInfoEntity>((e) => MusicMetaInfoEntity().fromJson(e)).toList() as M;
		}
		if(<MusicMetaInfoData>[] is M){
			return data.map<MusicMetaInfoData>((e) => MusicMetaInfoData().fromJson(e)).toList() as M;
		}
		if(<MusicMetaInfoDataCoverPictures>[] is M){
			return data.map<MusicMetaInfoDataCoverPictures>((e) => MusicMetaInfoDataCoverPictures().fromJson(e)).toList() as M;
		}
		if(<MusicEntity>[] is M){
			return data.map<MusicEntity>((e) => MusicEntity().fromJson(e)).toList() as M;
		}
		if(<MusicData>[] is M){
			return data.map<MusicData>((e) => MusicData().fromJson(e)).toList() as M;
		}
		if(<MusicDataContent>[] is M){
			return data.map<MusicDataContent>((e) => MusicDataContent().fromJson(e)).toList() as M;
		}
		if(<MusicDataPageable>[] is M){
			return data.map<MusicDataPageable>((e) => MusicDataPageable().fromJson(e)).toList() as M;
		}
		if(<MusicDataPageableSort>[] is M){
			return data.map<MusicDataPageableSort>((e) => MusicDataPageableSort().fromJson(e)).toList() as M;
		}
		if(<MusicDataSort>[] is M){
			return data.map<MusicDataSort>((e) => MusicDataSort().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}